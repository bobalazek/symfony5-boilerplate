name: Development Workflow

on: [push]

jobs:
  ci:
    name: CI Pipeline
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Docker compose - Prepare containers
      - name: Docker compose - Prepare .env file
        run: cp -b .env.ci .env
      - name: Docker compose - Build & start the containers
        run: docker-compose up -d

      # App Backend - Install dependencies, lint files & prepare database
      - name: App Backend - Install dependencies
        run: docker exec -i s5bp_php composer install

      - name: App Backend - Lint twig template files
        run: docker exec -i s5bp_php php bin/console lint:twig templates/
      - name: App Backend - Lint YAML config files
        run: docker exec -i s5bp_php php bin/console lint:yaml config/
      - name: App Backend - Lint XLIFF translation files
        run: docker exec -i s5bp_php php bin/console lint:xliff translations/
      - name: App Backend - Lint PHP files
        run: docker exec -i s5bp_php php-cs-fixer fix --config=.php-cs-fixer.dist.php --dry-run --diff

      - name: App Backend - Database recreate
        run: docker exec -i s5bp_php composer run-script database-recreate

      # App Frontend - Install dependencies, lint files & build the app
      - name: App Frontend - Install dependencies
        run: docker exec -i s5bp_node yarn install --frozen-lockfile

      - name: App Frontend - Lint JS files
        run: docker exec -i s5bp_node yarn run lint

      - name: App Frontend - Build the app
        run: docker exec -i s5bp_node yarn run build

      # App Backend - Run tests
      - name: App Backend - Run tests
        run: docker exec -i s5bp_php php bin/phpunit

      # Cypress
      # We need to recreate the database here, because in the APP_ENV=test,
      # the sessions table is never created.
      # We also first replace the DoctrineFixturesBundle to be available in production,
      # so we can actually load the fixtures. Not sure why we need to require it again.
      - name: Cypress - Prepare
        run: |
          sed -i 's|APP_ENV=..*|APP_ENV=prod|g' .env
          docker-compose up -d
          docker exec -i s5bp_php php bin/console cache:clear
          docker exec -i s5bp_php composer require doctrine/doctrine-fixtures-bundle
          sudo chmod -R 777 web/var
          sed -i "s|Doctrine\\\Bundle\\\FixturesBundle\\\DoctrineFixturesBundle::class..*|Doctrine\\\Bundle\\\FixturesBundle\\\DoctrineFixturesBundle::class => ['all' => true],|g" web/config/bundles.php
          docker exec -i s5bp_php php bin/console doctrine:schema:update --force
          docker exec -i s5bp_php php bin/console doctrine:fixtures:load --no-interaction --env=dev
      - name: Cypress - Install dependencies
        run: docker exec -i s5bp_cypress yarn install --frozen-lockfile
      - name: Cypress - Run tests
        run: docker exec -i s5bp_cypress yarn test --config video=true # Override the default behaviour where we disable the video

      # App Backend - Lint PHP files (with PHP Stan)
      # This one needs to be at the end, because the tests above
      # will create the autoload.php file in /bin/.phpunit/.../vendor
      - name: App Backend - Prepare to Lint PHP files (with PHPStan)
        run: cp -b web/phpstan.neon.ci web/phpstan.neon
      - name: App Backend - Lint PHP files (with PHPStan)
        run: docker exec -i s5bp_php vendor/bin/phpstan analyse

      # Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: artifacts
          path: |
            e2e/cypress/screenshots
            e2e/cypress/videos
            web/var/log
            web/config/bundles.php
            web/vendor/composer

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        if: ${{ always() }}
